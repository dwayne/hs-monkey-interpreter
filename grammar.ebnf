Program ::= Stmt*

Stmt     ::= ( Let | Return | ExprStmt )
Let      ::= 'let' Id '=' Expr ';'
Return   ::= 'return' Expr ';'
ExprStmt ::= Expr ';'?

Expr       ::= Equality
Equality   ::= Comparison ( ( '==' | '!=' ) Comparison )*
Comparison ::= Term ( ( '<' | '>' ) Term )*
Term       ::= Factor ( ( '+' | '-' ) Factor )*
Factor     ::= Unary ( ( '*' | '/' ) Unary )*
Unary      ::= ( '!' | '-' ) Unary | Operator
Operator   ::= Primary ( '(' Args? ')' | '[' Expr ']' )*
Primary    ::= Id | Number | String | Array | 'true' | 'false'
             | 'if' '(' Expr ')' Block ( 'else' Block )?
             | 'fn' '(' Params? ')' Block
             | '(' Expr ')'
String     ::= '"' [^"]* '"'
Array      ::= '[' ExprList? ']'

Block    ::= '{' Stmt+ '}'
Params   ::= Id ( ',' Id )*
Args     ::= ExprList
ExprList ::= Expr ( ',' Expr )*

Id     ::= [a-zA-Z_]+
Number ::= [0-9]+
